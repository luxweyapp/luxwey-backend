// This is your Prisma schema file
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_PRISMA_URL")
}

model User {
  id                 String               @id @default(uuid())
  name               String
  email              String               @unique
  phoneNumber       String?
  bookings           Booking[]
  createdAt          DateTime          @default(now())
  updatedAt          DateTime          @updatedAt
  deleted_at         DateTime?

  @@index([deleted_at])
  @@map(name: "user")
}

enum VehicleType {
  CAR
  SUV
}

model Vehicle {
  id                    String               @id @default(uuid())
  type                  VehicleType   // e.g., "4-seater car" or "7-seater SUV"
  isAvailableForBooking Boolean
  description           String?
  seats                 Seat[]
  basePrice             Float
  createdAt             DateTime          @default(now())
  updatedAt             DateTime          @updatedAt
  deleted_at            DateTime?

  @@index([deleted_at])
  @@map(name: "vehicle")
  @@unique([type, isAvailableForBooking])
}

model Seat {
  id                    String            @id @default(uuid())
  seatNumber            Int      // e.g., 1, 2, 3, etc.
  isBooked              Boolean           @default(false)
  vehicleId             String
  vehicle               Vehicle           @relation(fields: [vehicleId], references: [id])
  bookingId             String?
  booking               Booking?          @relation(fields: [bookingId], references: [id])
  createdAt             DateTime          @default(now())
  updatedAt             DateTime          @updatedAt
  deleted_at            DateTime?

  @@index([deleted_at])
  @@map(name: "seat")
}

model Booking {
  id              String      @id @default(uuid())
  userId          String
  user            User        @relation(fields: [userId], references: [id])
  travelDate      DateTime
  destination     String
  totalPrice      Float
  pickupPoint     String
  paymentStatus   String      @default("pending") // e.g., "pending", "completed", "failed"
  seats           Seat[]
  payments        Payment[] // A booking can have multiple payments
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  deleted_at      DateTime?

  @@index([deleted_at])
  @@map(name: "booking")
}

model Payment {
  id          String      @id @default(uuid())
  bookingId   String
  booking     Booking  @relation(fields: [bookingId], references: [id])
  amount      Float
  status      String   @default("pending") // e.g., "pending", "completed", "failed"
  paymentDate DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  deleted_at  DateTime?

  @@index([deleted_at])
  @@map(name: "payment")
}
